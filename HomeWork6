#Создадим виртуальную машину 2 ядра 4 ОЗУ + 10 гигов диск
#Поставим 15й Postgres
sudo apt update && sudo apt upgrade -y && sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && sudo apt-get update && sudo apt-get -y install postgresql-15

#Инициализируем PGBENCH
postgres@otuscoursepostgre2:/home/ubuntu$  pgbench -i postgres
dropping old tables...
NOTICE:  table "pgbench_accounts" does not exist, skipping
NOTICE:  table "pgbench_branches" does not exist, skipping
NOTICE:  table "pgbench_history" does not exist, skipping
NOTICE:  table "pgbench_tellers" does not exist, skipping
creating tables...
generating data (client-side)...
100000 of 100000 tuples (100%) done (elapsed 0.14 s, remaining 0.00 s)
vacuuming...
creating primary keys...
done in 0.52 s (drop tables 0.00 s, create tables 0.01 s, client-side generate 0.28 s, vacuum 0.07 s, primary keys 0.16 s).

#Запустим с параметрами
postgres@otuscoursepostgre2:/home/ubuntu$ pgbench -c8 -P 6 -T 60 -U postgres postgres
pgbench (15.4 (Ubuntu 15.4-2.pgdg22.04+1))
starting vacuum...end.
progress: 6.0 s, 504.7 tps, lat 15.735 ms stddev 8.568, 0 failed
progress: 12.0 s, 499.7 tps, lat 16.018 ms stddev 8.038, 0 failed
progress: 18.0 s, 499.5 tps, lat 16.016 ms stddev 8.153, 0 failed
progress: 24.0 s, 499.2 tps, lat 16.020 ms stddev 8.147, 0 failed
progress: 30.0 s, 497.2 tps, lat 16.099 ms stddev 8.609, 0 failed
progress: 36.0 s, 498.7 tps, lat 16.036 ms stddev 7.964, 0 failed
progress: 42.0 s, 499.7 tps, lat 16.014 ms stddev 8.644, 0 failed
progress: 48.0 s, 499.5 tps, lat 16.012 ms stddev 8.005, 0 failed
progress: 54.0 s, 475.8 tps, lat 16.819 ms stddev 12.819, 0 failed
progress: 60.0 s, 502.7 tps, lat 15.911 ms stddev 8.640, 0 failed
transaction type: <builtin: TPC-B (sort of)>
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 1
maximum number of tries: 1
duration: 60 s
number of transactions actually processed: 29867
number of failed transactions: 0 (0.000%)
latency average = 16.065 ms
latency stddev = 8.847 ms
initial connection time = 31.626 ms
tps = 497.872270 (without initial connection time)
postgres@otuscoursepostgre2:/home/ubuntu$ 

#применим параметры инстанса постгреса согласно файлу прикрепленном к заданию
max_connections = 40
shared_buffers = 1GB
effective_cache_size = 3GB
maintenance_work_mem = 512MB
checkpoint_completion_target = 0.9
wal_buffers = 16MB
default_statistics_target = 500
random_page_cost = 4
effective_io_concurrency = 2
work_mem = 6553kB
min_wal_size = 4GB
max_wal_size = 16GB

#применим изменения и перезапустим службу postgresql
ubuntu@otuscoursepostgre2:~$ sudo nano /etc/postgresql/15/main/postgresql.conf 
ubuntu@otuscoursepostgre2:~$ sudo systemctl restart postgresql
ubuntu@otuscoursepostgre2:~$ 
#запустим pgbench
postgres@otuscoursepostgre2:/home/ubuntu$ pgbench -c8 -P 6 -T 60 -U postgres postgres
pgbench (15.4 (Ubuntu 15.4-2.pgdg22.04+1))
starting vacuum...end.
progress: 6.0 s, 502.0 tps, lat 15.835 ms stddev 7.154, 0 failed
progress: 12.0 s, 495.3 tps, lat 16.121 ms stddev 6.688, 0 failed
progress: 18.0 s, 499.3 tps, lat 16.023 ms stddev 5.881, 0 failed
progress: 24.0 s, 499.5 tps, lat 16.001 ms stddev 6.771, 0 failed
progress: 30.0 s, 499.7 tps, lat 16.007 ms stddev 5.446, 0 failed
progress: 36.0 s, 499.0 tps, lat 16.017 ms stddev 5.543, 0 failed
progress: 42.0 s, 498.3 tps, lat 16.043 ms stddev 6.198, 0 failed
progress: 48.0 s, 499.7 tps, lat 15.998 ms stddev 6.304, 0 failed
progress: 54.0 s, 499.5 tps, lat 15.999 ms stddev 6.540, 0 failed
progress: 60.0 s, 498.8 tps, lat 16.031 ms stddev 6.810, 0 failed
transaction type: <builtin: TPC-B (sort of)>
scaling factor: 1
query mode: simple
number of clients: 8
number of threads: 1
maximum number of tries: 1
duration: 60 s
number of transactions actually processed: 29955
number of failed transactions: 0 (0.000%)
latency average = 16.009 ms
latency stddev = 6.358 ms
initial connection time = 26.136 ms
tps = 499.282079 (without initial connection time)

# особых изменений при перзапуске PGBENCH не замечено, возможно причина во времени работы утилиты(всего 60 минут)
# По факту были серьезно изменены параметры сервера, а именно, размер shaped_buffers (стал занимать 25% от общей памяти ОС, что сообтветсвует лучшим практикам)
# также изменены минимальный и максимальный размер файлов журнала транзакций, что серьезно влияет на загрузку дискового массива.
# видно что число обработанных трназакций примерно одинаковое 29867 и 29955, соответсвенно количество транзакций в секунду +- одинаковые 497 и 499


# создадим таблицу test, наполним ее данными и выясним размер таблицы
ubuntu@otuscoursepostgre2:~$ sudo -u postgres psql
could not change directory to "/home/ubuntu": Permission denied
psql (15.4 (Ubuntu 15.4-2.pgdg22.04+1))
Type "help" for help.

postgres=# create table test(id serial, text text)
postgres-# ;
CREATE TABLE
postgres=# \dt
              List of relations
 Schema |       Name       | Type  |  Owner   
--------+------------------+-------+----------
 public | pgbench_accounts | table | postgres
 public | pgbench_branches | table | postgres
 public | pgbench_history  | table | postgres
 public | pgbench_tellers  | table | postgres
 public | test             | table | postgres
(5 rows)

postgres=# inset into test(text) select 'random_data' from generate_series(1,1000000);
ERROR:  syntax error at or near "inset"
LINE 1: inset into test(text) select 'random_data' from generate_ser...
        ^
postgres=# insert into test(text) select 'random_data' from generate_series(1,1000000);
INSERT 0 1000000
postgres=# \dt+ test
                                  List of relations
 Schema | Name | Type  |  Owner   | Persistence | Access method | Size  | Description 
--------+------+-------+----------+-------------+---------------+-------+-------------
 public | test | table | postgres | permanent   | heap          | 42 MB | 
(1 row)

postgres=# 
# обновим данные в таблице и посмотрим ее объем
postgres=# update test set text = 'random_data2';
UPDATE 1000000
postgres=# update test set text = 'random_data3';
UPDATE 1000000
postgres=# update test set text = 'random_data4';
UPDATE 1000000
postgres=# update test set text = 'random_data5';
UPDATE 1000000
postgres=# update test set text = 'random_data_over';
UPDATE 1000000
postgres=# \dt+ test
                                   List of relations
 Schema | Name | Type  |  Owner   | Persistence | Access method |  Size  | Description 
--------+------+-------+----------+-------------+---------------+--------+-------------
 public | test | table | postgres | permanent   | heap          | 229 MB | 
(1 row)

postgres=# 
select c.relname,
current_setting('autovacuum_vacuum_threshold') as av_base_thresh,
current_setting('autovacuum_vacuum_scale_factor') as av_scale_factor,
(current_setting('autovacuum_vacuum_threshold')::int +
(current_setting('autovacuum_vacuum_scale_factor')::float * c.reltuples)) as av_thresh,
s.n_dead_tup
from pg_stat_user_tables s join pg_class c ON s.relname = c.relname
where s.n_dead_tup > (current_setting('autovacuum_vacuum_threshold')::int
+ (current_setting('autovacuum_vacuum_scale_factor')::float * c.reltuples));
 relname | av_base_thresh | av_scale_factor | av_thresh | n_dead_tup 
---------+----------------+-----------------+-----------+------------
 test    | 50             | 0.2             |    200050 |    3999454
(1 row)

postgres=# 
# количество мертвых записей пока не прошел autovacuum  3999454


postgres=# SELECT schemaname, relname, last_autovacuum
FROM pg_stat_user_tables
WHERE schemaname = 'public' AND relname = 'test';
 schemaname | relname |        last_autovacuum        
------------+---------+-------------------------------
 public     | test    | 2023-10-17 13:02:18.207044+00
(1 row)

postgres=#                                            
select c.relname,
current_setting('autovacuum_vacuum_threshold') as av_base_thresh,
current_setting('autovacuum_vacuum_scale_factor') as av_scale_factor,
(current_setting('autovacuum_vacuum_threshold')::int +
(current_setting('autovacuum_vacuum_scale_factor')::float * c.reltuples)) as av_thresh,
s.n_dead_tup
from pg_stat_user_tables s join pg_class c ON s.relname = c.relname
where s.n_dead_tup > (current_setting('autovacuum_vacuum_threshold')::int
+ (current_setting('autovacuum_vacuum_scale_factor')::float * c.reltuples));
 relname | av_base_thresh | av_scale_factor | av_thresh | n_dead_tup 
---------+----------------+-----------------+-----------+------------
(0 rows)

postgres=# 
# За это время по доблице прошел тред autovacuum и количество метвых точек ушло

# Отключим автовакуум на таблице test

postgres=# ALTER TABLE test SET (autovacuum_enabled = off);
ALTER TABLE
postgres=# 
#обновим записи и посмотрим размер таблицы
postgres=# ALTER TABLE test SET (autovacuum_enabled = off);
ALTER TABLE
postgres=# update test set text = 'random_data_over1';
UPDATE 1000000
postgres=# update test set text = 'random_data_over21';
UPDATE 1000000
postgres=# update test set text = 'random_data_over3';
UPDATE 1000000
postgres=# update test set text = 'random_data_over43';
UPDATE 1000000
postgres=# update test set text = 'random_data_over53';
UPDATE 1000000
postgres=# update test set text = 'random_data_over6';
UPDATE 1000000
postgres=# update test set text = 'random_data_over7';
UPDATE 1000000
postgres=# update test set text = 'random_data_over87';
UPDATE 1000000
postgres=# update test set text = 'random_data_over9';
UPDATE 1000000
postgres=# update test set text = 'random_data_ove109';
UPDATE 1000000
postgres=# \dt+ test                                  
                                   List of relations
 Schema | Name | Type  |  Owner   | Persistence | Access method |  Size  | Description 
--------+------+-------+----------+-------------+---------------+--------+-------------
 public | test | table | postgres | permanent   | heap          | 547 MB | 
(1 row)

postgres=# 
 №547 мегабайта стала весить. количество мертвых записей:
 relname | av_base_thresh | av_scale_factor | av_thresh | n_dead_tup 
---------+----------------+-----------------+-----------+------------
 test    | 50             | 0.2             |    200050 |    9996973

# autovacuum отключен, удалять их некому.

# если выполнить вручную команду vacuum, то мертвые строки удалятся и появится свободное место в базе:
postgres=# vacuum
postgres-# ;
VACUUM
postgres=#       
select c.relname,
current_setting('autovacuum_vacuum_threshold') as av_base_thresh,
current_setting('autovacuum_vacuum_scale_factor') as av_scale_factor,
(current_setting('autovacuum_vacuum_threshold')::int +
(current_setting('autovacuum_vacuum_scale_factor')::float * c.reltuples)) as av_thresh,
s.n_dead_tup
from pg_stat_user_tables s join pg_class c ON s.relname = c.relname
where s.n_dead_tup > (current_setting('autovacuum_vacuum_threshold')::int
+ (current_setting('autovacuum_vacuum_scale_factor')::float * c.reltuples));
 relname | av_base_thresh | av_scale_factor | av_thresh | n_dead_tup 
---------+----------------+-----------------+-----------+------------
(0 rows)

